@color-main-0: #808080;
@color-main-1: #a6a6a6;
@color-main-2: #cccccc;
@color-main-3: #f2f2f2;
@color-main-4: #030303;
@color-main-5: #030303;
@color-alt-0: #40bf80;
@color-alt-1: #79d2a6;
@color-alt-2: #b3e6cc;
@color-alt-3: #ecf9f2;
@color-alt-4: #010403;
@color-alt-5: #020503;
@color-third-0: #4095bf;
@color-third-1: #79b5d2;
@color-third-2: #b3d4e6;
@color-third-3: #ecf4f9;
@color-third-4: #010304;
@color-third-5: #020405;


/*
label: Основной шрифт
type: font
tab: fonts
*/
@font_text:Times;

/*
label: Шрифт для навигации
type: font
tab: fonts
*/
@font_nav:@font_text;

/*
label: Шрифт для заголовков
type: font
tab: fonts
*/
@font_headers:@font_text;

/*
label: Ширина лейаута
type: number
tab: sizes
units: %
*/
@layout_width:80%;

/*
label: Максимальная ширина лейаута
type: number
tab: sizes
units: px
*/
@max_width:1000px;

/*
label: Основной
type: colorset
tab: colors
neutral: true
*/
@color-main:#000;

@color_main:@color-main;

/*
label: Акценты
type: colorset
tab: colors
*/
@color-alt:#000;

@color_alt:@color-alt;

@color_light:@color-main-3;
@color_light_inverted: @color-main-5;

/*
label: Дополнительный
type: colorset
tab: colors
*/
@color-third:#000;


@color-main:@color-main-0;
@color_main_inverted:@color-main-5;

@color-alt:@color-alt-1;
@color_alt_inverted:@color-alt-4;

/*
label: Горизонтальный отступ
type: number
units: vw
tab: sizes
min: 0.2
max: 5
step: 0.1
*/
@layout_padding_horizontal:30px;

@x: @layout_padding_horizontal;


/*
label: Вертикальный отступ
type: number
units: vw
tab: sizes
min: 0.2
max: 5
step: 0.1
*/
@layout_padding_vertical:20px;

@y: @layout_padding_vertical;

@pad_min_width:700px;

.pad() {
    padding: @layout_padding_vertical @layout_padding_horizontal;
}

.on_padded(@rules) {
    .layout__section > &, .columns__col_padded > & {
        @rules();
    }
}

.antipad_y() {

}

.antipad_x() {

}

.antipad() {
    .antipad_x();
    .antipad_y();
}

.media_min(@width, @rules) {
    @media screen and (min-width: @width) {
        @rules();
    }
}

.layout_width() {
    width:@layout_width;
    min-width:0;
    max-width:@max_width;
    align-self:center;

    @bp: (@max_width / (@layout_width/100)) ~"";

    @media screen and (min-width: @bp) {
        width:auto;
        align-self:stretch;
    }
}

.clearfix() {
    &:after {
        content:'';
        visibility:hidden;
        display:block;
        clear:both;
    }
}

.font(@font) when (@font = none) {
    
}

// 'nav 16px bold italic uppercase underline'
.font(@font) when not(@font = none) {
    @family: extract(@font, 1);
    & when not(@family = inherit) {
        .font-family(extract(@font, 1));
    }
    @size: extract(@font, 2);
    & when not(@size = inherit) and (length(@font) > 1) {
        font-size: @size;
    }
    @weight: extract(@font, 3);
    & when not(@weight = inherit) and (length(@font) > 2) {
        font-weight: @weight;
    }
    @style: extract(@font, 4);
    & when not(@style = inherit) and (length(@font) > 3) {
        font-style: @style;
    }
    @transform: extract( @font, 5);
    & when not(@transform = inherit) and (length(@font) > 4) { 
        text-transform: @transform;
    }
    & when ( length(@font) > 5 ) {
        text-decoration: extract( @font, 6);
    }
}


.font-family(@family:main) {
    .wf-active & {
        @var:'font_@{family}';
        font-family:@@var;
    }
    .wf-loading & {
        color: transparent !important;
    }
}

.font-style(@val) when (length(@val) = 1) {
    font-style:normal;
    font-weight:@val;
}

.font-style(@val) when (length(@val) = 2) {
    font-weight: extract(@val, 1);
    font-style: extract(@val, 2);
}

.color(@color; ... ) when (@color = none) {
    nocolor:true;
}

.color(@color; @prop:color) when (length(@color) = 2) {
    .color(extract(@color, 1); extract(@color, 2); @prop);
} 

.color(@color:main; @level:0; @prop:color) when (length(@color) = 1) and not(@color = none) {
    @var:'color-@{color}-@{level}';
    @{prop}:@@var;
}

.tcolor (@color) when (@color = none) {
    
}

.tcolor(@color:main; @level:0; @prop:color) when (length(@color) = 1) and not(@color = none) {
    .color(@color; @level; @prop);
    .dark({
        .color(@color; (5 - @level); @prop);
    });
}

.tcolor(@color:main 0; @prop:color) when (length(@color) = 2) {
    .tcolor(extract(@color, 1); extract(@color, 2); @prop);
}

.color_transparent(@color:'main') {
    .tcolor(@color);
}

.tcolor-on(@color:main 0; @on; @prop:color;) when (@on = none) {
    .tcolor(@color; @prop;);
}

.tcolor-on(@color:main 0; @on; @prop:color) when ( length(@on) = 2 ) {
    @level:extract(@on, 2);
    tc:@color;
    on:@on;
    & when (@level > 3) {
        use:first;
        .color(@color; @prop;);
    }
    & when (@level < 4) {
        @color_level: extract(@color, 2);
        use:second;
        second:extract(@color, 1) (5 - @color_level);
        .color(extract(@color, 1); (5 - @color_level); @prop);
    }
}



.pad_x() {
    .fx-content_parent-padding_none&, .fx-content_parent-padding_ns& {
        padding-left:@layout_padding_horizontal;
        padding-right:@layout_padding_horizontal;
    }
}

.dark(@rules) {
    .fx-content_parent-lightness_dark& {
        @rules();
    }
}

.light(@rules) {
    .fx-content_parent-lightness_light& {
        @rules();
    }
}

.centered(@rules) {
    .fx-content_parent-align_center& {
        @rules();
    }
}

.left(@rules) {
    .fx-content_parent-align_left& {
        @rules();
    }
}

.right(@rules) {
    .fx-content_parent-align_right& {
        @rules();
    }
}

.text-align() {
    text-align:left;
    .centered({
        text-align:center;
    });
    .right({
        text-align:right;
    });
}

.text(@font-size:17px; @color:main) {
    .tcolor(@color);
    max-width:800px;
    &, p, ul, ol {
        font-size:@font-size;
        line-height:150%;
        &:first-child {
            margin-top:0;
        }
        &:last-child {
            margin-bottom:0;
        }
    }
    a {
        .tcolor(alt);
    }
}