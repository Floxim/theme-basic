@color-main-0: #808080;
@color-main-1: #a6a6a6;
@color-main-2: #cccccc;
@color-main-3: #f2f2f2;
@color-main-4: #030303;
@color-main-5: #030303;
@color-alt-0: #40bf80;
@color-alt-1: #79d2a6;
@color-alt-2: #b3e6cc;
@color-alt-3: #ecf9f2;
@color-alt-4: #010403;
@color-alt-5: #020503;
@color-third-0: #4095bf;
@color-third-1: #79b5d2;
@color-third-2: #b3d4e6;
@color-third-3: #ecf4f9;
@color-third-4: #010304;
@color-third-5: #020405;


/*
label: Основной шрифт
type: font
tab: fonts
*/
@font_text:Times;

/*
label: Шрифт для навигации
type: font
tab: fonts
*/
@font_nav:@font_text;

/*
label: Шрифт для заголовков
type: font
tab: fonts
*/
@font_headers:@font_text;

/*
label: Ширина лейаута
type: number
tab: sizes
units: %
*/
@layout_width:80%;

/*
label: Максимальная ширина лейаута
type: number
tab: sizes
units: px
*/
@max_width:1000px;

@min_width:900px;


@lw: unit(@layout_width/100);


@max_bp: (@max_width / @lw) ~"";
@layout_bp: @max_bp; // check usage and drop!

@min_bp: @min_width;

@em: 16px * (@max_width / 1200);


/*
label: Основной
type: colorset
tab: colors
neutral: true
*/
@color-main:#000;

@color_main:@color-main;

/*
label: Акценты
type: colorset
tab: colors
*/
@color-alt:#000;

@color_alt:@color-alt;

@color_light:@color-main-3;
@color_light_inverted: @color-main-5;

/*
label: Дополнительный
type: colorset
tab: colors
*/
@color-third:#000;


@color-main:@color-main-0;
@color_main_inverted:@color-main-5;

@color-alt:@color-alt-1;
@color_alt_inverted:@color-alt-4;

.media_min(@width, @rules) {
    @media screen and (min-width: @width) {
        @rules();
    }
}

.layout_width() {
    
    @m_vw: ( (@min_width - @max_width) * @lw ) / (@min_width * @lw - @max_width);
    @m_px: (@max_width * @lw - @max_width * @m_vw)/@lw;
    
    width: ~"calc(" unit(@m_vw * 100, vw) ~" + " @m_px ~")";
    
    min-width:0;
    max-width:@max_width;
    align-self:center;
    .fx-block_parent-align_left& {
        align-self: flex-start;
    }
    
    @media (max-width: @min_bp) {
        width:100%;
    }
}

.clearfix() {
    &:after {
        content:'';
        visibility:hidden;
        display:block;
        clear:both;
    }
}

.width(@width) {
    & when  (@width = full) {
        .fx-block_parent-width_full& {
            width:100%;
            max-width:none;
        }
        .fx-block_parent-width_layout& {
            
            align-self: stretch;
            
            @f_margin: 50 - (5000 / @layout_width);
            
            @x: -1 * (@max_width * @lw - @max_width) / (2 * @min_width * @lw - 2 * @max_width);
            @y: -1 * (2 * @max_width * @x - @max_width * @lw + @max_width)/(2 * @lw);
            
            @margin: ~"calc( " unit(@x * 100, vw) ~" + " @y ~")";
            
            margin-left:@margin;
            margin-right:@margin;
            
            @media (min-width: @max_bp) {
                
                @f_bp_margin: ~'calc( ( 100vw - ' @max_width ~') / -2 )';
                
                margin-left:@f_bp_margin;
                margin-right:@f_bp_margin;
            }
            
            @media (max-width: @min_bp) {
                margin-left:0;
                margin-right:0;
            }
        }
    }
    & when (@width = layout) {
        .fx-block_parent-width_full& {
            .layout_width();
        }
        .fx-block_parent-width_layout& {
            align-self: stretch;
            max-width:none;
        }
    }
    & when (@width = none) {
        align-self: stretch;
        max-width:none;
        .fx-block& {
            width:auto;
        }
    }
    & when (@width = auto) {
        width:auto;
    }
    & when (isnumber(@width)) {
        .fx-block& {
            width: @width * 1%;
        }
    }
}

.align-items(@align) {
    & when (@align = none) {
        .fx-block_parent-align_left& {
            align-items: flex-start;
        }
        .fx-block_parent-align_center& {
            align-items: center;
        }
        .fx-block_parent-align_right& {
            align-items: flex-end;
        }
    }
    & when (@align = left) {
        align-items: flex-start;
    }
    & when (@align = center) {
        align-items: center;
    }
    & when (@align = right) {
        align-items: flex-end;
    }
}

.align-self(@align) {
    & when (@align = left) {
        align-self: flex-start;
    }
    & when (@align = center) {
        align-self: center;
    }
    & when (@align = right) {
        align-self: flex-end;
    }
}

.font(@font) when (@font = none) {
    
}

.font_min_size(@size, @min) {
    @fbp: @min / ( (@em / (@max_width / @lw) * 100 / @lw) * ( @size / 16) )*100;
    @media (max-width: ( @fbp) ) {
        orig:@size;
        font-size:@min;
    }
}

// 'nav 16px bold italic uppercase underline'
.font(@font) when not(@font = none) {
    @family: extract(@font, 1);
    & when not(@family = inherit) {
        .font-family(extract(@font, 1));
    }
    @size: extract(@font, 2);
    & when not(@size = inherit) and (length(@font) > 1) {
        font-size:unit(@size/16, rem);
        & when (@size < 25px) and (@size > 14) {
            .font_min_size(@size, 14px);
        }
        & when (@size < 15px) {
            .font_min_size(@size, 12px);
        }
    }
    @weight: extract(@font, 3);
    & when not(@weight = inherit) and (length(@font) > 2) {
        font-weight: @weight;
    }
    @style: extract(@font, 4);
    & when not(@style = inherit) and (length(@font) > 3) {
        font-style: @style;
    }
    @transform: extract( @font, 5);
    & when not(@transform = inherit) and (length(@font) > 4) { 
        text-transform: @transform;
    }
    @decoration: extract( @font, 6);
    & when not(@decoration = auto) and (length(@font) > 5) { 
        text-decoration: @decoration;
    }
    /*
    & when (length(@font) > 8) {
        @color: extract(@font, 7);
        @color_level: extract(@font, 8);
        @color_opacity: extract(@font, 9);
        .tcolor(@color @color_level @color_opacity);
    }
    */
    & when (length(@font) > 6) {
        @line_height: extract(@font, 7);
        line-height: @line_height;
    }
    & when (length(@font) > 7) {
        @letter_spacing: extract(@font,8);
        & when not(@letter_spacing = em) {
            letter-spacing: @letter_spacing;
        }
    }
}


.font-family(@family:main) {
    .wf-active & {
        @var:'font_@{family}';
        font-family:@@var;
    }
    .wf-loading & {
        color: transparent !important;
    }
}

.font-style(@val) when (length(@val) = 1) {
    font-style:normal;
    font-weight:@val;
}

.font-style(@val) when (length(@val) = 2) {
    font-weight: extract(@val, 1);
    font-style: extract(@val, 2);
}

.color(@color; ... ) when (@color = none) {
    //nocolor:true;
}

.color(@color; @prop:color) when (length(@color) >= 2) {
    @c:extract(@color,1);
    @l:extract(@color,2);
    @var:'color-@{c}-@{l}';
    & when (length(@color) > 2) {
        @o:extract(@color,3);
        @{prop}:fade(@@var, @o * 100);
    }
    & when (length(@color) = 2) {
        @{prop}:@@var;
    }
    //.color(extract(@color, 1); extract(@color, 2); @prop);
} 

.color(@color:main; @level:0; @prop:color) when (length(@color) = 1) and not(@color = none) {
    @var:'color-@{color}-@{level}';
    @{prop}:@@var;
}

.tcolor (@color) when (@color = none) {
    
}

.tcolor(@color:main; @level:0; @prop:color) when (length(@color) = 1) and not(@color = none) {
    .color(@color; @level; @prop);
    .dark({
        .color(@color; (5 - @level); @prop);
    });
}

.tcolor(@color:main 0; @prop:color) when (length(@color) = 2) {
    .tcolor(extract(@color, 1); extract(@color, 2); @prop);
}


.tcolor-on(@color:main 0; @on; @prop:color;) when (@on = none) {
    .tcolor(@color; @prop);
}

.tcolor-on(@color:main 0; @on; @prop:color) when ( length(@on) >= 2 ) {
    @level:extract(@on, 2);
    & when (@level > 3) {
        .color(@color; @prop);
    }
    & when (@level < 4) {
        @color_level: extract(@color, 2);
        .color(extract(@color, 1); (5 - @color_level); @prop);
    }
}

.tcolor-on-bg (@color: main 0; @bg; @prop: color) {
    @lightness: replace(extract(@bg, 1), "custom_", '');
    & when (@lightness = none) {
        .tcolor(@color; @prop);
    }
    & when (@lightness = light) {
        .tcolor-on(@color; main 5; @prop);
    }
    & when (@lightness = dark) {
        .tcolor-on(@color; main 0; @prop);
    }
}

.dark(@rules) {
    .fx-block_lightness_dark& {
        @rules();
    }
}

.light(@rules) {
    .fx-content_parent-lightness_light& {
        @rules();
    }
}

.centered(@rules) {
    .fx-content_parent-align_center& {
        @rules();
    }
}

.left(@rules) {
    .fx-content_parent-align_left& {
        @rules();
    }
}

.right(@rules) {
    .fx-content_parent-align_right& {
        @rules();
    }
}

.text-align() {
    .fx-block_parent-align_left& {
        text-align:left;
    }
    .fx-block_parent-align_center& {
        text-align:center;
    }
    .fx-block_parent-align_right& {
        text-align:right;
    }
}

.text(@font-size:17px; @color:main) {
    .tcolor(@color);
    max-width:800px;
    &, p, ul, ol {
        font-size:@font-size;
        line-height:150%;
        &:first-child {
            margin-top:0;
        }
        &:last-child {
            margin-bottom:0;
        }
    }
    a {
        .tcolor(alt);
    }
    
}

.background (@background) when (@background = none) {
    background:none;
}

.background(@bg) {
    .bgi-loop(@bg; 1);
}

.bgi-loop(@items; @index) when (@index < length(@items) / 3) {
    @real_index: (@index - 1) * 3 + 2;
    @type_group: extract(@items, @real_index);
    @type: extract(@type_group, 1);
    @vals: extract(@items, @real_index + 1);
    @sizes: extract(@items, @real_index + 2);
    
    & when (@type = linear) {
        .bg-linear (extract(@type_group, 2), @vals);
    }
    
    & when (@type = image) {
        .bg-image ( @vals );
    }
    
    & when (@type = color) {
        .bg-color(@vals);
    }
    
    & when not(@type = color) {
        .bg-sizing(@sizes);
    }
    
    .bgi-loop(@items; @index + 1);
}

.bg-image(@vals) {
    background+:url(@vals);
}

.bg-linear(@dir; @points) {
    background+:~"linear-gradient(" @dir;
    .bg-linear-point(@points);
    background+_:~")";
}

.bg-color(@vals) {
    @c:extract(@vals, 1);
    @l:extract(@vals, 2);
    @o:extract(@vals, 3);
    @cvar:'color-@{c}-@{l}';
    
    background+: fade(@@cvar, @o * 100%)
}

.bg-linear-point(@points; @index:1) when (@index < length(@points) ) {
    
    @c:extract(@points, @index);
    @l:extract(@points, @index + 1);
    @o:extract(@points, @index + 2);
    @p:extract(@points, @index + 3);
    @cvar:'color-@{c}-@{l}';
    background+: fade(@@cvar, @o * 100%) @p;
    .bg-linear-point(@points; @index+4);
}

.bg-sizing(@props) {
    background+_: @props;
}


.border(@props) when (@props = none) {
    
}

// 5px 3px solid main 2 1
// rad size style color

.border(@props) when not(@props = none) {
    @top:extract(@props,1);
    @right:extract(@props,2);
    @bottom:extract(@props,3);
    @left:extract(@props,4);
    
    btop: @top;
    bright: @right;
    bbottom: @bottom;
    bleft: @left;
    
    @top_left_radius: unit(extract(@top,1), px);
    @top_size: extract(@top, 2);
    @top_style: extract(@top,3);
    @top_color: extract(@top, 4) extract(@top,5) extract(@top,6);
    
    
    @top_right_radius: unit(extract(@right,1), px);
    @right_size: extract(@right, 2);
    @right_style: extract(@right,3);
    @right_color: extract(@right, 4) extract(@right,5) extract(@right,6);
    
    @bottom_right_radius: unit(extract(@bottom,1), px);
    @bottom_size: extract(@bottom, 2);
    @bottom_style: extract(@bottom,3);
    @bottom_color: extract(@bottom, 4) extract(@bottom,5) extract(@bottom,6);
    
    
    @bottom_left_radius: unit(extract(@left,1), px);
    @left_size: extract(@left, 2);
    @left_style: extract(@left,3);
    @left_color: extract(@left, 4) extract(@left,5) extract(@left,6);
    
    
    border-radius:@top_left_radius @top_right_radius @bottom_right_radius @bottom_left_radius;
    border-width:@top_size @right_size @bottom_size @left_size;
    border-style:@top_style @right_style @bottom_style @left_style;
    
    .border-color(@top_color);
    .border-color(@right_color);
    .border-color(@bottom_color);
    .border-color(@left_color);
}

.border-color(@vals) {
    @c:extract(@vals, 1);
    @l:extract(@vals, 2);
    @o:extract(@vals, 3);
    @cvar:'color-@{c}-@{l}';
    
    border-color+_: fade(@@cvar, @o * 100%);
}


.box-shadow(@vals) when (@vals = none) {}

.box-shadow(@vals) when not(@vals = none) and ( length( extract(@vals, 1) ) > 1) {
     calls: length( extract(@vals, 1) );
    .box-shadow-loop(@vals, 1);
}

.box-shadow(@vals) when not(@vals = none) and ( length( extract(@vals, 1) ) = 1) {
    calln:true;
  	.box-shadow-loop(@vals none, 1);
}

.box-shadow-loop(@vals; @index) when (@index <= length(@vals) ) and (length( extract(@vals, @index) ) = 8) {
    @level: extract(@vals, @index);
    @type: extract(@level, 1);

    @x: unit(extract(@level, 2), px);
    @y: unit(extract(@level, 3), px);
    @blur: unit(extract(@level, 4), px);
    @spread:  unit(extract(@level, 5), px);

    @c: extract(@level, 6);
    @l: extract(@level, 7);
    @o: extract(@level, 8);

    @cvar:'color-@{c}-@{l}';
    @color: fade(@@cvar, @o * 100%);


    & when (@type = inset) {
        box-shadow+:inset @x;
    }
    & when (@type = outer) {
        box-shadow+: @x;
    }

    box-shadow+_: @y @blur @spread @color;
    .box-shadow-loop(@vals; @index + 1);
}